// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: net.proto

package netgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TpService_PingPong_FullMethodName   = "/netsend.TpService/PingPong"
	TpService_TaskStream_FullMethodName = "/netsend.TpService/TaskStream"
)

// TpServiceClient is the client API for TpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TpServiceClient interface {
	// 登录验证
	PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// 双向流：客户端和服务端都可以持续发送消息
	TaskStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TaskMessage, Response], error)
}

type tpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTpServiceClient(cc grpc.ClientConnInterface) TpServiceClient {
	return &tpServiceClient{cc}
}

func (c *tpServiceClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pong)
	err := c.cc.Invoke(ctx, TpService_PingPong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpServiceClient) TaskStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TaskMessage, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TpService_ServiceDesc.Streams[0], TpService_TaskStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskMessage, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TpService_TaskStreamClient = grpc.BidiStreamingClient[TaskMessage, Response]

// TpServiceServer is the server API for TpService service.
// All implementations must embed UnimplementedTpServiceServer
// for forward compatibility.
type TpServiceServer interface {
	// 登录验证
	PingPong(context.Context, *Ping) (*Pong, error)
	// 双向流：客户端和服务端都可以持续发送消息
	TaskStream(grpc.BidiStreamingServer[TaskMessage, Response]) error
	mustEmbedUnimplementedTpServiceServer()
}

// UnimplementedTpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTpServiceServer struct{}

func (UnimplementedTpServiceServer) PingPong(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (UnimplementedTpServiceServer) TaskStream(grpc.BidiStreamingServer[TaskMessage, Response]) error {
	return status.Errorf(codes.Unimplemented, "method TaskStream not implemented")
}
func (UnimplementedTpServiceServer) mustEmbedUnimplementedTpServiceServer() {}
func (UnimplementedTpServiceServer) testEmbeddedByValue()                   {}

// UnsafeTpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TpServiceServer will
// result in compilation errors.
type UnsafeTpServiceServer interface {
	mustEmbedUnimplementedTpServiceServer()
}

func RegisterTpServiceServer(s grpc.ServiceRegistrar, srv TpServiceServer) {
	// If the following call pancis, it indicates UnimplementedTpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TpService_ServiceDesc, srv)
}

func _TpService_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpServiceServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TpService_PingPong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpServiceServer).PingPong(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _TpService_TaskStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TpServiceServer).TaskStream(&grpc.GenericServerStream[TaskMessage, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TpService_TaskStreamServer = grpc.BidiStreamingServer[TaskMessage, Response]

// TpService_ServiceDesc is the grpc.ServiceDesc for TpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netsend.TpService",
	HandlerType: (*TpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _TpService_PingPong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TaskStream",
			Handler:       _TpService_TaskStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "net.proto",
}
